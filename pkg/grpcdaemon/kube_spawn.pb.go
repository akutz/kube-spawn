// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kube_spawn.proto

/*
Package grpcdaemon is a generated protocol buffer package.

It is generated from these files:
	kube_spawn.proto

It has these top-level messages:
	Result
	ClusterProps
	Empty
*/
package grpcdaemon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Result struct {
	Success    bool   `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
	Error      string `protobuf:"bytes,2,opt,name=Error,json=error" json:"Error,omitempty"`
	Kubeconfig string `protobuf:"bytes,3,opt,name=Kubeconfig,json=kubeconfig" json:"Kubeconfig,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Result) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Result) GetKubeconfig() string {
	if m != nil {
		return m.Kubeconfig
	}
	return ""
}

type ClusterProps struct {
	Name              string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	KubernetesVersion string `protobuf:"bytes,2,opt,name=KubernetesVersion,json=kubernetesVersion" json:"KubernetesVersion,omitempty"`
	HyperkubeImage    string `protobuf:"bytes,3,opt,name=HyperkubeImage,json=hyperkubeImage" json:"HyperkubeImage,omitempty"`
	NumberNodes       uint32 `protobuf:"varint,4,opt,name=NumberNodes,json=numberNodes" json:"NumberNodes,omitempty"`
}

func (m *ClusterProps) Reset()                    { *m = ClusterProps{} }
func (m *ClusterProps) String() string            { return proto.CompactTextString(m) }
func (*ClusterProps) ProtoMessage()               {}
func (*ClusterProps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClusterProps) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterProps) GetKubernetesVersion() string {
	if m != nil {
		return m.KubernetesVersion
	}
	return ""
}

func (m *ClusterProps) GetHyperkubeImage() string {
	if m != nil {
		return m.HyperkubeImage
	}
	return ""
}

func (m *ClusterProps) GetNumberNodes() uint32 {
	if m != nil {
		return m.NumberNodes
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Result)(nil), "grpcdaemon.Result")
	proto.RegisterType((*ClusterProps)(nil), "grpcdaemon.ClusterProps")
	proto.RegisterType((*Empty)(nil), "grpcdaemon.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KubeSpawn service

type KubeSpawnClient interface {
	Create(ctx context.Context, in *ClusterProps, opts ...grpc.CallOption) (*Result, error)
	Start(ctx context.Context, in *ClusterProps, opts ...grpc.CallOption) (*Result, error)
	GetKubeconfig(ctx context.Context, in *ClusterProps, opts ...grpc.CallOption) (*Result, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error)
	Destroy(ctx context.Context, in *ClusterProps, opts ...grpc.CallOption) (*Result, error)
}

type kubeSpawnClient struct {
	cc *grpc.ClientConn
}

func NewKubeSpawnClient(cc *grpc.ClientConn) KubeSpawnClient {
	return &kubeSpawnClient{cc}
}

func (c *kubeSpawnClient) Create(ctx context.Context, in *ClusterProps, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/grpcdaemon.KubeSpawn/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeSpawnClient) Start(ctx context.Context, in *ClusterProps, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/grpcdaemon.KubeSpawn/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeSpawnClient) GetKubeconfig(ctx context.Context, in *ClusterProps, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/grpcdaemon.KubeSpawn/GetKubeconfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeSpawnClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/grpcdaemon.KubeSpawn/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeSpawnClient) Destroy(ctx context.Context, in *ClusterProps, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/grpcdaemon.KubeSpawn/Destroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KubeSpawn service

type KubeSpawnServer interface {
	Create(context.Context, *ClusterProps) (*Result, error)
	Start(context.Context, *ClusterProps) (*Result, error)
	GetKubeconfig(context.Context, *ClusterProps) (*Result, error)
	List(context.Context, *Empty) (*Result, error)
	Destroy(context.Context, *ClusterProps) (*Result, error)
}

func RegisterKubeSpawnServer(s *grpc.Server, srv KubeSpawnServer) {
	s.RegisterService(&_KubeSpawn_serviceDesc, srv)
}

func _KubeSpawn_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterProps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeSpawnServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdaemon.KubeSpawn/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeSpawnServer).Create(ctx, req.(*ClusterProps))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeSpawn_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterProps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeSpawnServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdaemon.KubeSpawn/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeSpawnServer).Start(ctx, req.(*ClusterProps))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeSpawn_GetKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterProps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeSpawnServer).GetKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdaemon.KubeSpawn/GetKubeconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeSpawnServer).GetKubeconfig(ctx, req.(*ClusterProps))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeSpawn_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeSpawnServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdaemon.KubeSpawn/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeSpawnServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeSpawn_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterProps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeSpawnServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdaemon.KubeSpawn/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeSpawnServer).Destroy(ctx, req.(*ClusterProps))
	}
	return interceptor(ctx, in, info, handler)
}

var _KubeSpawn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdaemon.KubeSpawn",
	HandlerType: (*KubeSpawnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _KubeSpawn_Create_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _KubeSpawn_Start_Handler,
		},
		{
			MethodName: "GetKubeconfig",
			Handler:    _KubeSpawn_GetKubeconfig_Handler,
		},
		{
			MethodName: "List",
			Handler:    _KubeSpawn_List_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _KubeSpawn_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kube_spawn.proto",
}

func init() { proto.RegisterFile("kube_spawn.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xff, 0xe9, 0x3f, 0x69, 0xec, 0xd4, 0x16, 0x3b, 0x78, 0x08, 0x1e, 0x24, 0xe4, 0x20,
	0x3d, 0x48, 0x05, 0x3d, 0xa8, 0x27, 0x0f, 0xb5, 0xa8, 0x28, 0x45, 0x52, 0x10, 0x6f, 0xb2, 0x49,
	0xc7, 0x5a, 0xda, 0xec, 0x86, 0x99, 0x0d, 0xd2, 0xaf, 0xe2, 0x57, 0xf0, 0x4b, 0x4a, 0xd2, 0x62,
	0xab, 0xe0, 0xa1, 0xc7, 0x79, 0x3f, 0xe6, 0xbd, 0x9d, 0xc7, 0xc2, 0xde, 0xac, 0x48, 0xe8, 0x45,
	0x72, 0xf5, 0xae, 0x7b, 0x39, 0x1b, 0x6b, 0x10, 0x26, 0x9c, 0xa7, 0x63, 0x45, 0x99, 0xd1, 0xd1,
	0x33, 0xd4, 0x63, 0x92, 0x62, 0x6e, 0x31, 0x00, 0x7f, 0x54, 0xa4, 0x29, 0x89, 0x04, 0x4e, 0xe8,
	0x74, 0x77, 0x62, 0x5f, 0x96, 0x23, 0xee, 0x83, 0x37, 0x60, 0x36, 0x1c, 0xd4, 0x42, 0xa7, 0xdb,
	0x88, 0x3d, 0x2a, 0x07, 0x3c, 0x04, 0xb8, 0x2f, 0x12, 0x4a, 0x8d, 0x7e, 0x9d, 0x4e, 0x82, 0xff,
	0x15, 0x82, 0xd9, 0xb7, 0x12, 0x7d, 0x38, 0xb0, 0xdb, 0x9f, 0x17, 0x62, 0x89, 0x1f, 0xd9, 0xe4,
	0x82, 0x08, 0xee, 0x50, 0x65, 0x54, 0xb9, 0x37, 0x62, 0x57, 0xab, 0x8c, 0xf0, 0x18, 0x3a, 0xa5,
	0x09, 0x6b, 0xb2, 0x24, 0x4f, 0xc4, 0x32, 0x35, 0x7a, 0x15, 0xd3, 0x99, 0xfd, 0x06, 0x78, 0x04,
	0xed, 0xdb, 0x45, 0x4e, 0x5c, 0x92, 0xbb, 0x4c, 0x4d, 0x68, 0x15, 0xdb, 0x7e, 0xfb, 0xa1, 0x62,
	0x08, 0xcd, 0x61, 0x91, 0x25, 0xc4, 0x43, 0x33, 0x26, 0x09, 0xdc, 0xd0, 0xe9, 0xb6, 0xe2, 0xa6,
	0x5e, 0x4b, 0x91, 0x0f, 0xde, 0x20, 0xcb, 0xed, 0xe2, 0xf4, 0xb3, 0x06, 0x8d, 0xf2, 0x05, 0xa3,
	0xb2, 0x1f, 0xbc, 0x80, 0x7a, 0x9f, 0x49, 0x59, 0xc2, 0xa0, 0xb7, 0x2e, 0xa9, 0xb7, 0x79, 0xc6,
	0x01, 0x6e, 0x92, 0x65, 0x77, 0xd1, 0x3f, 0x3c, 0x07, 0x6f, 0x64, 0x15, 0xdb, 0xad, 0x17, 0xaf,
	0xa0, 0x75, 0x43, 0x76, 0xdd, 0xe4, 0xd6, 0x06, 0x27, 0xe0, 0x3e, 0x4c, 0xc5, 0x62, 0x67, 0x93,
	0x56, 0xc7, 0xfd, 0xb1, 0x70, 0x09, 0xfe, 0x35, 0x89, 0x65, 0xb3, 0xd8, 0x36, 0x2b, 0xa9, 0x57,
	0x1f, 0xe8, 0xec, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x64, 0x9b, 0x99, 0x4b, 0x54, 0x02, 0x00, 0x00,
}
